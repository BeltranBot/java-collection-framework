package com.cf08.natural_ordering_and_the_comparable_interface;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

class Person implements Comparable<Person> {
	private String name;

	public Person(String name) {
		this.name = name;
	}

	public String toString() {
		return name;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	@Override
	public int compareTo(Person person) {
		return name.compareTo(person.name);
	}
}

public class App {
	public static void main(String[] args) {
		List<Person> list = new ArrayList<Person>();
		Set<Person> set = new TreeSet<Person>();

		addElement(list);
		addElement(set);
		
		// Collections.sort(list);

		showElements(list);
		System.out.println();
		showElements(set);
	}

	private static void addElement(Collection<Person> col) {
		col.add(new Person("joe"));
		col.add(new Person("sue"));
		col.add(new Person("juliet"));
		col.add(new Person("claire"));
		col.add(new Person("mike"));
	}

	private static void showElements(Collection<Person> col) {
		for (Person person : col) {
			System.out.println(person);
		}
	}

}
